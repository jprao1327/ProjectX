import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Legend,
  ResponsiveContainer,
} from "recharts"

const data = [
  {
    group_name: "Group A",
    boys: 200,
    girls: 400,
  },
  {
    group_name: "Group B",
    boys: 3000,
    girls: 500,
  },
  {
    group_name: "Group C",
    boys: 1000,
    girls: 1500,
  },
  {
    group_name: "Group D",
    boys: 700,
    girls: 1200,
  },
]

const App = () => {
  const DataFormatter = (number) => {
    if (number > 1000) {
      return `${(number / 1000).toString()}k`
    }
    return number.toString()
  }

  return (
    <ResponsiveContainer width="100%" height={500}>
      <BarChart
        data={data}
        margin={{
          top: 5,
        }}
      >
        <XAxis
          dataKey="group_name"
          tick={{
            stroke: "gray",
            strokeWidth: 1,
          }}
        />
        <YAxis
          tickFormatter={DataFormatter}
          tick={{
            stroke: "gray",
            strokeWidth: 0,
          }}
        />
        <Legend
          wrapperStyle={{
            padding: 30,
          }}
        />
        <Bar dataKey="boys" name="Boys" fill="#1f77b4" barSize="20%" />
        <Bar dataKey="girls" name="Girls" fill="#fd7f0e" barSize="20%" />
      </BarChart>
    </ResponsiveContainer>
  )
}

export default App

width-	'100%' (value can be percentage string or number)
height-	'100%' (value can be percentage string or number)

Note :One of the props width and height should be a percentage string in the ResponsiveContainer Component.
tickFormatter
const DataFormatter = (number) => {
  if (number > 1000) {
    return `${(number / 1000).toString()}k`
  }
  return number.toString()
}


dataKey-	The key of the object in data that we want to display it's value on the axis	No default value (value can be string or number)
tick-	Represents a tick	No default value. If false - No ticks will be drawn, object - Configuration of ticks, React element - Custom react element for drawing ticks (value can be boolean, object or React element)
tickFormatter-	The formatter function of tick	No default value (Function)

---------------------------------------------------------------------------------
Legend
The Legend Component represents the legend of a Chart.
By default, the content of the legend is generated by the name of Line, Bar, Area, etc. If no name has been set, the prop dataKey is used to generate the content of the legend.
Props:We can provide different props to the ReactJS Legend Component. Below are some of the most commonly used props.

iconType-	The type of icon in the legend item	No default value (value can be 'line', 'plainline', 'square', 'rect', 'circle', 'cross', 'diamond','star', 'triangle', or 'wye')
layout-	The layout of legend items	'horizontal' (value can be 'horizontal' or 'vertical')
verticalAlign-	The alignment of legend items in vertical direction	'middle' (value can be 'top', 'middle', or 'bottom')
align-	The alignment of legend items in horizontal direction	'center' (value can be 'left', 'center', or 'right')
wrapperStyle-	The style of the legend container	No default value (value can be React Inline styles)

Bar
The Bar Component represents a bar in the Chart.
Props:
We can provide different props to the ReactJS Bar Component. Below are some of the most commonly used props.

dataKey-	The key of the object in data that we want to display it's value	No default value (value can be string or number)
name-	The name of the bar	No default value (value can be string or number)
fill-	The color to fill the rectangle in a bar	(value can be given color in hexCode or string format)
barSize-	The width or height of the bar	No default value (value can be number)


------------------------------------------------------------------------------------------------------------------------------
The recharts supports different Components for the Bar Chart. Below are some of the most commonly used Components.

PieThe Pie Component represents a pie in the Chart.

Props:We can provide different props to the ReactJS Pie Component. Below are some of the most commonly used props.
import { PieChart, Pie, Legend, Cell, ResponsiveContainer } from "recharts"

const data = [
  {
    count: 809680,
    language: "Telugu",
  },
  {
    count: 4555697,
    language: "Hindi",
  },
  {
    count: 12345657,
    language: "English",
  },
]

const App = () => {
  return (
    <ResponsiveContainer width="100%" height={300}>
      <PieChart>
        <Pie
          cx="70%"
          cy="40%"
          data={data}
          startAngle={0}
          endAngle={360}
          innerRadius="40%"
          outerRadius="70%"
          dataKey="count"
        >
          <Cell name="Telugu" fill="#fecba6" />
          <Cell name="Hindi" fill="#b3d23f" />
          <Cell name="English" fill="#a44c9e" />
        </Pie>
        <Legend
          iconType="circle"
          layout="vertical"
          verticalAlign="middle"
          align="right"
        />
      </PieChart>
    </ResponsiveContainer>
  )
}

export default App

cx-	The x-axis coordinate of a center point	'50%'. If set a percentage, the final value is obtained by multiplying the percentage of container width (value can be percentage string or number)
cy-	The y-axis coordinate of a center point	'50%'. If set a percentage, the final value is obtained by multiplying the percentage of container height (value can be percentage string or number)
data-	The source data in which each element is an object	No default value (value can be Array)
startAngle-	The start angle of the first sector	0 (value can be number)
endAngle-	The end angle of the last sector, which should be unequal to startAngle	360 (value can be number)
innerRadius-	The inner radius of all the sectors	0 (value can be percentage or number)
OuterRadius	-The outer radius of all the sectors	0 (value can be percentage or number)
dataKey-	The key of the object in data  that we want to display it's value on the sector	No default value
name-	The name of the cell	No default value (can be a string. This value can be taken as the content of the legend)
fill-	The color to fill the cell	(value can be any color in hexCode or string format)

Note: If a percentage is set to the props innerRadius or outerRadius, the final value is obtained by multiplying the percentage of maxRadius which is calculated by the width, height, cx, and cy.
The ResponsiveContainer and Legend Components in Pie Chart are similar to the Components in Bar Chart.


